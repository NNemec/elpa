How to install ELPA:
----------------------

ELPA is shipped with a typical "configure" and "make" procedure. It is
recommended to use this way to install ELPA, see (A). If you do not want to 
install ELPA as library, but to include it in your source code, please refer 
to point (B)



you can find a 
"Makefile.example" in ./test, to see how this is done. Please distibute then 
all files of ELPA with your code.


(A): Installing ELPA as library with configure
===================================================

The configure installation is best done in four steps

1) run configure: 
   
   Check the available options with "configure --help". 
   ELPA is shipped with several different versions of the
   elpa2-kernel, each optimized and tuned for a different
   architecture. Since, at the moment we do not want to
   define a default, which works but maybe with less then
   the optimal performance, it is MANDATORY that you choose
   (real and complex kernels) for your system, via the
   "--with-..." option. For hints which kernels might be best
   for you, please refer to the file 
   "./src/elpa2_kernels/README_elpa2_kernels.txt".

   Please point to your blacs/scalapack installation and the
   linkline with the variables "BLACS_LDFLAGS" and "BLACS_FCFLAGS". 
   You can either specify your own builds of lapack/blacs/scalapack
   or use specialized Vendor packages, e.g. if available you can use 
   Intel's MKL.

   Please set the optimisation that you would like with the
   variable "OPT_FCFLAGS", e.g. OPT_FCFLAGS="-O3 -xAVX".
   For some elpa2-kernels, it is MANDATORY to set a few options,
   please see "./src/elpa2_kernels/README_elpa2_kernels.txt".

   Set the "prefix" - flag, if you wish another installation location than
   the default "/usr/local/".

   Note, that at the moment we do not officially support "cross compilation"
   allthough it should work.

2) run "make"

3) run "make check"
   a simple test of ELPA is done. At the moment the usage of "mpiexec"
   is required. If this is not possible at your system, you can run the
   binaries "test_real", "test_real2", "test_complex", and "test_complex2"
   yourself. At the moment the tests check whether the residual and the
   orthogonality of the found eigenvectors are lower than a threshold of
   5e-12. If this test fails, or if you believe the threshold should be
   even lower, please talk to us.


4) run "make install"
   Note that a pckconfig file for ELPA is produced. You should then be
   able to link the ELPA library to your own applications.


B) Installing ELPA without the autotools procedure
===================================================
    You can find an example makefile "Makefile.example" in "./test",
    to see how you can use ELPA directly in your code, and not as library. 
    If you do so, please distibute then all files of ELPA with your code.

    However, this is not the recommended way for several reasons:
     - from the last release, ELPA has grown substantially in performance
       optimizations but also complexity. The simple "just use elpa source
       files in your code" approach is becoming more and more difficult.
    - you still have to choose an elpa2-kernel (see at (A)). Getting them
      build from hand might be tedious.
    - the file elpa2.F90 uses preprocessor defines for the different kernels.
      you will have to do this by hand, if you do not use the autotools 
      infrastructure.



How to use ELPA:
-----------------
Using ELPA should be quite simple. It is similiar to ScalaPack but the API
is different. See the examples in the directory "./test". There is shown how
to evoke ELPA from a Fortran code.

If you installed ELPA with the build procedure a pk-config file is produced,
which will tell you how to link against ELPA.
