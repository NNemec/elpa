
#ifdef DOUBLE_PRECISION_COMPLEX
     subroutine herm_matrix_allreduce_double(n,a,lda,ldb,comm)
#else
     subroutine herm_matrix_allreduce_single(n,a,lda,ldb,comm)
#endif
     !-------------------------------------------------------------------------------
     !  herm_matrix_allreduce: Does an mpi_allreduce for a hermitian matrix A.
     !  On entry, only the upper half of A needs to be set
     !  On exit, the complete matrix is set
#ifdef HAVE_DETAILED_TIMINGS
       use timings
#endif

      use precision
      implicit none
      integer(kind=ik)               :: n, lda, ldb, comm
      complex(kind=COMPLEX_DATATYPE) :: a(lda,ldb)

      integer(kind=ik)               :: i, nc, mpierr
      complex(kind=COMPLEX_DATATYPE) :: h1(n*n), h2(n*n)

#ifdef HAVE_DETAILED_TIMINGS
#ifdef DOUBLE_PRECISION_COMPLEX
       call timer%start("herm_matrix_allreduce_double")
#else
       call timer%start("herm_matrix_allreduce_single")
#endif
#endif

       nc = 0
       do i=1,n
         h1(nc+1:nc+i) = a(1:i,i)
         nc = nc+i
       enddo
#ifdef WITH_MPI
#ifdef HAVE_DETAILED_TIMINGS
       call timer%start("mpi_communication")
#endif

#ifdef DOUBLE_PRECISION_COMPLEX
       call mpi_allreduce(h1, h2, nc, MPI_DOUBLE_COMPLEX, MPI_SUM, comm, mpierr)
#else
       call mpi_allreduce(h1, h2, nc, MPI_COMPLEX, MPI_SUM, comm, mpierr)
#endif
#ifdef HAVE_DETAILED_TIMINGS
       call timer%stop("mpi_communication")
#endif

       nc = 0
       do i=1,n
         a(1:i,i) = h2(nc+1:nc+i)
         a(i,1:i-1) = conjg(a(1:i-1,i))
         nc = nc+i
       enddo


#else /* WITH_MPI */
!       h2(1:nc) = h1(1:nc)

       nc = 0
       do i=1,n
         a(1:i,i) = h1(nc+1:nc+i)
         a(i,1:i-1) = conjg(a(1:i-1,i))
         nc = nc+i
       enddo


#endif /* WITH_MPI */

!       nc = 0
!       do i=1,n
!         a(1:i,i) = h2(nc+1:nc+i)
!         a(i,1:i-1) = conjg(a(1:i-1,i))
!         nc = nc+i
!       enddo

#ifdef HAVE_DETAILED_TIMINGS
#ifdef DOUBLE_PRECISION_COMPLEX
       call timer%stop("herm_matrix_allreduce_double")
#else
       call timer%stop("herm_matrix_allreduce_single")
#endif
#endif

#ifdef DOUBLE_PRECISION_COMPLEX
     end subroutine herm_matrix_allreduce_double
#else
     end subroutine herm_matrix_allreduce_single
#endif


