  function solve_elpa2_evp_&
  &MATH_DATATYPE&
  &_wrapper_&
  &PRECISION&
  & (na, nev, a, lda, ev, q, ldq, nblk, matrixCols, mpi_comm_rows, mpi_comm_cols, mpi_comm_all, &
#if REALCASE == 1
    THIS_REAL_ELPA_KERNEL_API, useQR, &
#endif
#if COMPLEXCASE == 1
    THIS_COMPLEX_ELPA_KERNEL_API, &
#endif
    useGPU)  result(success) bind(C,name="elpa_solve_evp_&
    &MATH_DATATYPE&
    &_2stage_&
    &PRECISION&
    &_precision")
    use, intrinsic :: iso_c_binding
    use elpa2

    implicit none
    integer(kind=c_int)                    :: success
    integer(kind=c_int), value, intent(in) :: na, nev, lda, ldq, nblk, matrixCols, mpi_comm_cols, mpi_comm_rows, &
                                              mpi_comm_all
    integer(kind=c_int), value, intent(in) :: useGPU
#if REALCASE == 1
    integer(kind=c_int), value, intent(in) :: THIS_REAL_ELPA_KERNEL_API, useQR
#endif
#if COMPLEXCASE == 1
    integer(kind=c_int), value, intent(in) :: THIS_COMPLEX_ELPA_KERNEL_API
#endif

    real(kind=C_DATATYPE_KIND)             :: ev(1:na)
#if REALCASE == 1
#ifdef USE_ASSUMED_SIZE
    real(kind=C_DATATYPE_KIND)             :: a(lda,*), q(ldq,*)
#else
    real(kind=C_DATATYPE_KIND)             :: a(1:lda,1:matrixCols), q(1:ldq,1:matrixCols)
#endif
#endif /* REALCASE */

#if COMPLEXCASE == 1
#ifdef USE_ASSUMED_SIZE
    complex(kind=C_DATATYPE_KIND)          :: a(lda,*), q(ldq,*)
#else
    complex(kind=C_DATATYPE_KIND)          :: a(1:lda,1:matrixCols), q(1:ldq,1:matrixCols)
#endif
#endif /* COMPLEXCASE */

    logical                                :: successFortran, useQRFortran

#if REALCASE == 1
    if (useQR .eq. 0) then
      useQRFortran =.false.
    else
      useQRFortran = .true.
    endif
#endif
      successFortran = elpa_solve_evp_&
      &MATH_DATATYPE&
      &_2stage_&
      &PRECISION&
      & (na, nev, a, lda, ev, q, ldq, nblk, matrixCols, mpi_comm_rows, &
         mpi_comm_cols, mpi_comm_all, &
#if REALCASE == 1
	 THIS_REAL_ELPA_KERNEL_API, useQRFortran, &
#endif
#if COMPLEXCASE == 1
	 THIS_COMPLEX_ELPA_KERNEL_API, &
#endif
	 useGPU == 1)

    if (successFortran) then
      success = 1
    else
      success = 0
    endif

  end function

